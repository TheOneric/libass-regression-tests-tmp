name: Automatic Regression Tests

on:
  push:
    branches: [master, ci]
#  schedule:
#    - cron: '22 4 * * *'
  workflow_dispatch:

jobs:
  ART:
    runs-on: ubuntu-20.04
    # Run on each arch we support ASM on and furthemore
    # one additional little and big endian arch each
    strategy:
      matrix:
        arch: [amd64, i386, ppc64el, s390x, mips64el]
        suite: [buster]
        chroot-rev: [7]
        confopts: [""]
        cflags: [""]
        include:
          # Yes, GHA's kernel supports x32 syscalls
          - arch: x32
            suite: sid
            port: yes
            chroot-rev: 7
          - arch: riscv64
            suite: sid
            port: yes
            chroot-rev: 7
          # Enable sanitisers for native build
          - arch: amd64
            sanity: sane?

    steps:
      - name: Prepare System
        run: |
          sudo apt-get install -y \
                debian-keyring debian-archive-keyring debian-ports-archive-keyring \
                debootstrap qemu-user-static zstd
          sudo mkdir -p /var/chroot/imgs
          sudo chmod -R 777 /var/chroot
          luser="$(whoami)"
          sudo chown $luser:$luser /var/chroot/imgs

      # Each repo is allowed up to 5GB total cache
      # use it to store our (compressed) chroot dirs
      # (cache is branch scoped)
      - name: retrieve chroot cache
        uses: actions/cache@v2.1.3
        id: cache
        with:
          path: /var/chroot/imgs
          key: ${{ matrix.suite }}-${{ matrix.arch }}-${{ matrix.chroot-rev }}

      - name: Determine Chroot Prefixes
        run: |
          # Map debian arch/abi name to qemu arch name
          case "${{ matrix.arch }}" in
            amd64|x32)   qarch="x86_64"  ;;
            arm64)       qarch="aarch64" ;;
            armel|armhf) qarch="arm"     ;; # Untested
            arm)         qarch="armeb"   ;; # Untested
            ppc64el)     qarch="ppc64le" ;;
            *) qarch="${{ matrix.arch }}" ;;
          esac

          # Make sure we have an qemu layer available
          if [ x"$qarch" != xi386  ] && [ x"$qarch" != xx86_64 ] \
             && [ ! -x "/usr/bin/qemu-${qarch}-static" ]
          then
            echo "Arch '${{ matrix.arch }}/${qarch}' not supported!"
            exit 1
          fi

          # Set prefixes as needed
          outer_prefix=""
          inner_prefix=""
          case "${{ matrix.arch }}" in
            amd64|x32)
              : ;;
            i386)
              outer_prefix="linux32"
              ;;
            *)
              inner_prefix="/usr/bin/qemu-${qarch}-static"
              ;;
          esac

          echo "QEMU_ARCH=${qarch}"   >> $GITHUB_ENV
          echo "OPRE=${outer_prefix}" >> $GITHUB_ENV
          echo "IPRE=${inner_prefix}" >> $GITHUB_ENV
          echo "CHR_DIR=debian-${{ matrix.suite }}-${{ matrix.arch }}" >> $GITHUB_ENV


      - name: (Re)Create Chroot
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo "Creating '$CHR_DIR' !"
          sudo mkdir "$CHR_DIR"

          if [ x"${{ matrix.port }}" = xyes ] ; then
            crepo="http://ftp.ports.debian.org/debian-ports/"
            ckeyr="/usr/share/keyrings/debian-ports-archive-keyring.gpg"
          else
            crepo="http://deb.debian.org/debian"
            ckeyr="/usr/share/keyrings/debian-archive-keyring.gpg"
          fi

          # For simplicity, pretend every arch is foreign
          sudo debootstrap --foreign --arch=${{ matrix.arch }} \
                           --variant=minbase  \
                           --keyring="$ckeyr" \
                           ${{ matrix.suite }} "$CHR_DIR" "$crepo"

          if [ ! -z "${IPRE}" ] ; then
            echo "Copy qemu-binary '${IPRE}' into chroot."
            sudo cp "${IPRE}" "${CHR_DIR}${IPRE}"
          fi

          # Set additional packages for some archs
          case "${{ matrix.arch }}" in
            x86_64)   add_pkgs="nasm libasan5 libubsan1" ;;
            x32|i386) add_pkgs="nasm" ;;
            *)        add_pkgs="" ;;
          esac

          # ime we don't need to mount everything for those setup steps
          sudo $OPRE chroot "$CHR_DIR" $IPRE /bin/dash /debootstrap/debootstrap --second-stage
          sudo $OPRE chroot "$CHR_DIR" $IPRE /bin/dash -c '
            export DEBIAN_FRONTEND=noninteractive
            set -e
            apt-get install debian-ports-archive-keyring
            apt-get update && apt-get -y dist-upgrade

            apt-get install -y --no-install-recommends --no-install-suggests \
              git ca-certificates \
              autoconf automake make libtool pkg-config \
              gcc \
              libfreetype6-dev libfribidi-dev libfontconfig-dev libharfbuzz-dev libpng-dev \
              '"$add_pkgs"'

            useradd -m -d /home/artci -p notrelevant -s /bin/dash -U artci
            runuser -u artci mkdir /home/artci/workarea
            runuser -u artci mkdir /home/artci/workarea-skel
          '

      - name: Load and Update Chroot
        if: steps.cache.outputs.cache-hit == 'true'
        run: |
          sudo tar --zstd -xf /var/chroot/imgs/"$CHR_DIR".tar.zstd
          if [ ! -z "${IPRE}" ] ; then
            echo "Update qemu-binary '${IPRE}' ..."
            sudo cp "${IPRE}" "${CHR_DIR}${IPRE}"
          fi
          sudo $OPRE chroot "$CHR_DIR" $IPRE /bin/dash -c '
            export DEBIAN_FRONTEND=noninteractive
            apt-get update && apt-get -y dist-upgrade
          '


      - name: Prepare Chroot Jobs
        run: |
          cd "$CHR_DIR"/home/artci/workarea
          # Make sure we can write to job scripts
          sudo touch env.sh build-libass.sh test-libass.sh
          sudo chmod 777 env.sh build-libass.sh test-libass.sh
          echo '#!/bin/sh
            set -e
            export DEBIAN_FRONTEND=noninteractive
            export LC_ALL=C.UTF-8
            export SANITY="'"${{ matrix.sanity }}"'"
            export LIBASS_CONF="'"${{ matrix.confopts }}"'"
            export LIBASS_CFLAGS="'"${{ matrix.cflags }}"'"
            printf "Toolchain:    %s\\n" "$(gcc -dumpmachine)"
            printf "Kernel-Arch:  %s\\n" "$(uname -m)"
            printf "Debian Ver.:  %s\\n" "$(cat /etc/debian_version)"
            printf "Sanity-Check: %s\\n" "$SANITY"
          ' > env.sh

          # Build libass
          echo '#!/bin/sh
            . ./env.sh
            git clone --depth=2 https://github.com/libass/libass.git libass
            cd libass
            echo "Testing libass commit:"
            git log -1 --format=%H
            echo ""
            ./autogen.sh
            CFLAGS="$CFLAGS $LIBASS_CFLAGS" ./configure "$LIBASS_CONF" --enable-profile --enable-compare
            if [ -z "$SANITY" ] ; then
              make -j 2
            else
              make CC="gcc -fsanitize=address -fsanitize=undefined -fsanitize=float-cast-overflow -fno-sanitize-recover=all" -j 2
            fi
          ' > build-libass.sh

          # Test libass
          echo '#!/bin/sh
            . ./env.sh
            # Checkout via action did not work well with chroot
            git clone --depth=1 https://github.com/${{ github.repository }}.git libass-tests
            cd libass-tests
            if [ x"${{ github.ref }}" != x ] ; then
              git fetch --depth=1 origin ${{ github.ref }}:artci
              git checkout --force artci
            else
              echo "Could not determine Ref! Fallback to current master."
            fi
            echo "Using testsuite from commit:"
            git log -1 --format=%H
            echo ""
            ./run.sh ../libass/compare ../libass/profile
          ' > test-libass.sh


      - name: Mount Chroot
        run: |
          sudo sh -c "
            mount --rbind /sys/  $CHR_DIR/sys  ;
            mount --rbind /proc/ $CHR_DIR/proc ;
            mount --rbind /dev/  $CHR_DIR/dev  ;
          "


      - name: Chroot - Build Libass
        run: |
          sudo $OPRE chroot "$CHR_DIR" $IPRE /bin/dash -c '
            su -c '\''/bin/sh -c "cd ~/workarea; dash ./build-libass.sh"'\'' --login artci
          '

      - name: Chroot - Regression Tests
        run: |
          sudo $OPRE chroot "$CHR_DIR" $IPRE /bin/dash -c '
            su -c '\''/bin/sh -c "cd ~/workarea; dash ./test-libass.sh"'\'' --login artci
          '


      - name: Umount Chroot
        run: |
          sudo sh -c '
            for m in sys proc dev ; do
              mount --make-rslave '"$CHR_DIR"'/$m
              umount -R '"$CHR_DIR"'/$m
            done
          '


      - name: Cache Chroot
        run: |
          # Clean chroot
          sudo rm -fr "$CHR_DIR/home/artci/workarea"
          sudo cp -a "$CHR_DIR/home/artci/workarea-skel" "$CHR_DIR/home/artci/workarea"
          # Compress and store chroot in cache dir
          luser="$(whoami)"
          sudo tar --zstd -cf /var/chroot/imgs/"$CHR_DIR".tar.zstd "$CHR_DIR"
          sudo chown $luser:$luser /var/chroot/imgs/"$CHR_DIR".tar.zstd
          #sudo rm -rf "$CHR_DIR"
          #sudo du -sh "$CHR_DIR" /var/chroot-imgs/"$CHR_DIR".tar.zstd
