name: Automatic Regression Tests

on:
  push:
    branches: [master, ci]
#  schedule:
#    - cron: '22 4 * * *'
  workflow_dispatch:

jobs:
  ART:
    runs-on: ubuntu-20.04
    # Run on each arch we support ASM on and furthemore
    # one additional little and big endian arch each
        #arch: [amd64, i386, ppc64el, s390x]
    strategy:
      matrix:
        arch: [i386]
        suite: [buster]
        acflags: [""]
        chroot-rev: [0]
        include:
          # Yes, GHA's kernel seems to support x32 syscalls (see config in /boot)
          - arch: x32
            suite: sid
            port: yes
            chroot-rev: 0
      #    # Enable sanitisers for native build
      #    - arch: amd64
      #      sanity: yes

    steps:
      # Each repo is allowed up to 5GB total cache
      # use it to store our (compressed) chroot dirs
      - name: retrieve chroot cache
        uses: actions/cache@v2
        id: cache
        with:
          path: /var/chroot-imgs
          key: ${{ matrix.suite }}-${{ matrix.arch }}-${{ matrix.chroot-rev }}

      - name: Prepare System
        run: |
          sudo apt-get install -y \
                debian-keyring debian-archive-keyring debian-ports-archive-keyring \
                debootstrap qemu-user-static
          [ -d /var/chroot-imgs ] || sudo mkdir /var/chroot-imgs


      - name: Determine Chroot Prefixes
        run: |
          # Map debian arch/abi name to qemu arch name
          case "${{ matrix.arch }}" in
            amd64) qarch="x86_64"  ;;
            arm64) qarch="aarch64" ;;
            # TODO figure out "armel, armhf <-> arm, armeb"
            *) qarch="${{ matrix.arch }}" ;;
          esac

          # Make sure we have an qemu layer available
          if [ x"$qarch" != xx32  ] && [ x"$qarch" != xx86_64 ] \
             && [ ! -x "/usr/bin/qemu-${qarch}-static" ]
          then
            echo "Arch '${{ matrix.arch }}/${qarch}' not supported!"
            exit 1
          fi

          # Set prefixes as needed
          outer_prefix=""
          inner_prefix=""
          case "${{ matrix.arch }}" in
            amd64|x32)
              : ;;
            i386)
              outer_prefix="linux32"
              ;;
            *)
              inner_prefix="/usr/bin/qemu-${qarch}-static"
              ;;
          esac

          echo "QEMU_ARCH=${qarch}"   >> $GITHUB_ENV
          echo "OPRE=${outer_prefix}" >> $GITHUB_ENV
          echo "IPRE=${inner_prefix}" >> $GITHUB_ENV
          echo "CHR_DIR=debian-${{ matrix.suite }}-${{ matrix.arch }}" >> $GITHUB_ENV


      - name: (Re)Create Chroot
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo "Creating '$CHR_DIR' !"
          sudo mkdir "$CHR_DIR"

          if [ x"${{ matrix.port }}" = xyes ] ; then
            crepo="http://ftp.ports.debian.org/debian-ports/"
            ckeyr="/usr/share/keyrings/debian-ports-archive-keyring.gpg"
          else
            crepo="http://deb.debian.org/debian"
            ckeyr="/usr/share/keyrings/debian-archive-keyring.gpg"
          fi

          # To  avoid branches, pretend every arch is a foreign arch
          sudo debootstrap --foreign --arch=${{ matrix.arch }} \
                           --variant=minbase  \
                           --keyring="$ckeyr" \
                           ${{ matrix.suite }} "$CHR_DIR" "$crepo"

          if [ ! -z "${IPRE}" ] ; then
            sudo cp "${IPRE}" "${CHR_DIR}${IPRE}"
          fi

          # ime we don't need to mount everything for those setup steps
          sudo $OPRE chroot "$CHR_DIR" $IPRE /debootstrap/debootstrap --second-stage
          sudo $OPRE chroot "$CHR_DIR" $IPRE /bin/bash -c '
            export DEBIAN_FRONTEND=noninteractive
            apt-get install debian-ports-archive-keyring
            apt-get update && apt-get -y dist-upgrade

            echo "APT::Get::Install-Recommends \"false\";" >  /etc/apt/apt.conf.d/02norecommends
            echo "APT::Get::Install-Suggests \"false\";"   >> /etc/apt/apt.conf.d/02norecommends

            apt-get install -y \
              git git-lfs ca-certificates \
              autoconf automake make libtool pkg-config \
              gcc nasm \
              libfreetype6-dev libfribidi-dev libfontconfig-dev libharfbuzz-dev

            useradd -m -d /home/artci -p notrelevant -s /bin/bash -U artci
            runuser -u artci mkdir /home/artci/workarea
            runuser -u artci mkdir /home/artci/workarea-skel
          '

      - name: Load and Update Chroot
        if: steps.cache.outputs.cache-hit == 'true'
        run: |
          sudo tar xzf /var/chroot-imgs/"$CHR_DIR".tar.gz
          sudo $OPRE chroot "$CHR_DIR" $IPRE /bin/bash -c '
            export DEBIAN_FRONTEND=noninteractive
            apt-get update && apt-get -y dist-upgrade
          '

      - name: Inside Chroot
        run: |
          sudo $OPRE chroot "$CHR_DIR" $IPRE /bin/bash -c '
            uname -a
            gcc -dumpmachine
            echo "Greetings from this neat chroot!"
          '
          #TODO: copy env source file, exe script into chroot
          #TODO: mount chroot
          #TODO: exec script in chroot (/home/artci/workarea)
          #      Let chroot write succces into a file
          #TODO: umount
          #TODO: Read and report succes state


      - name: Cache Chroot
        run: |
          # Clean chroot
          sudo rm -fr "$CHR_DIR/home/artci/workarea"
          sudo cp -R "$CHR_DIR/home/artci/workarea-skel" "$CHR_DIR/home/artci/workarea"
          # Compress and store chroot in cache dir
          sudo tar czf /var/chroot-imgs/"$CHR_DIR".tar.gz "$CHR_DIR"
          sudo du -sh "$CHR_DIR" /var/chroot-imgs/"$CHR_DIR".tar.gz
